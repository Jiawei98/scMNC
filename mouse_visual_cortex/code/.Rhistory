method=method,k_NN=k_NN,k_medoids=k_medoid)
df$ttype = rep(class,2)
df$cellnames = rep(unlist(cellnames),2)
return(df[,-1])
}
edata = read.csv("../data/efeature.csv",stringsAsFactors = F)
gdata = read.csv('../data/geneExp.csv',header=T,check.names = F)
meta = read.csv('../data/20200711_patchseq_metadata_mouse.csv',header=T,check.names = F,stringsAsFactors = F)
gdata_type = read.csv("../data/DER-21_Single_cell_markergenes_UMI.csv",stringsAsFactors = F,header=T)
edata$session_id = sapply(edata$ID,function(x){na.omit(unlist(strsplit(x, "[^0-9]+")))[3]})
edata$subject_id = sapply(edata$ID,function(x){na.omit(unlist(strsplit(x, "[^0-9]+")))[2]})
edata$session_idg = sapply(edata$session_id,FUN = function(x){meta$transcriptomics_sample_id[meta$ephys_session_id==x]})
setwd("F:/wisc/git/mouse_visual_cortex/code")
library(plyr)
library(reshape2)
library(stringr)
library(dplyr)
library(ManiNetCluster)
library(ggplot2)
library(RColorBrewer)
Dim_red = function(edata,gdata,method,class,cellnames,d,k_NN,k_medoid){
#e-feature
X = apply(edata,2,scale)
#g-feature
Y=t(log10(gdata+1))
#Dim_red
XY_corr=Correspondence(matrix=diag(nrow(X)))
df=ManiNetCluster(X,Y,nameX='Ephys',nameY='Expr',corr=XY_corr,d=d,
method=method,k_NN=k_NN,k_medoids=k_medoid)
df$ttype = rep(class,2)
df$cellnames = rep(unlist(cellnames),2)
return(df[,-1])
}
edata = read.csv("../data/efeature.csv",stringsAsFactors = F)
gdata = read.csv('../data/geneExp.csv',header=T,check.names = F)
meta = read.csv('../data/20200711_patchseq_metadata_mouse.csv',header=T,check.names = F,stringsAsFactors = F)
gdata_type = read.csv("../data/DER-21_Single_cell_markergenes_UMI.csv",stringsAsFactors = F,header=T)
edata$session_id = sapply(edata$ID,function(x){na.omit(unlist(strsplit(x, "[^0-9]+")))[3]})
edata$subject_id = sapply(edata$ID,function(x){na.omit(unlist(strsplit(x, "[^0-9]+")))[2]})
edata$session_idg = sapply(edata$session_id,FUN = function(x){meta$transcriptomics_sample_id[meta$ephys_session_id==x]})
meta$genotype = sapply(meta$t_type,function(x){na.omit(unlist(strsplit(x, " ")))[1]})
meta$dendrite_type = mapvalues(meta$dendrite_type,from = "sparsely spiny",to = "spiny")
edata <- edata[,c(1:11,
12:18,21:23,#ramp
24:30,33:35,#long
36:42,45:47,#short
51)]
edata = na.omit(edata)
meta = meta[meta$transcriptomics_sample_id %in% edata$session_idg,]
meta = meta[meta$dendrite_type %in% c("spiny","aspiny"),]
meta = rbind(meta[meta$dendrite_type == "spiny",],
meta[meta$genotype %in% c("Lamp5","Pvalb","Serpinf1","Sncg","Sst","Vip") & meta$dendrite_type == "aspiny",])
cellnames = meta$transcriptomics_sample_id
edata = edata[,-which(names(edata)=="session_idg")];
rownames(edata) = edata$session_idg;
edata = edata[cellnames,]
gdata = gdata[!duplicated(gdata$gene),]
rownames(gdata) = gdata$gene;gdata = gdata[,-1]
gdata_type$Cluster = sapply(gdata_type$Cluster,substr,start=1,stop=2)
genenames = unique(gdata_type$Gene[gdata_type$Cluster %in% c("Ex","In")])
genenames = na.omit(rownames(gdata)[match(genenames,toupper(rownames(gdata)))])
gdata = gdata[intersect(genenames,rownames(gdata)),cellnames]
dendrite_type = sapply(cellnames,FUN = function(x){meta$dendrite_type[meta$transcriptomics_sample_id==x]})
n = nrow(edata)
method = c('linear manifold','cca','manifold warping','nonlinear manifold aln','nonlinear manifold warp')
#NMA
NMA_res = Dim_red(edata,gdata,method = method[4],class = dendrite_type, cellnames =cellnames,d=3L,k_NN=2L,k_medoid=5L)
NMA_res_e = NMA_res[NMA_res$data=="Ephys",]
NMA_res_t= NMA_res[NMA_res$data=="Expr",]
#Fig 2C
library(plot3D)
points3D(x=NMA_res_e$Val0, y=NMA_res_e$Val1, z=NMA_res_e$Val2,pch = 19,cex=0.5,bty="g",ticktype = "detailed", theta = 40, phi = 10,
xlab = "",ylab = "",zlab = "",
colvar = as.numeric(mapvalues(dendrite_type,names(table(dendrite_type)),1:2)),col =alpha(brewer.pal(6,"Spectral")[c(2,5)],0.8),
colkey = F)
points3D(x=NMA_res_t$Val0, y=NMA_res_t$Val1, z=NMA_res_t$Val2,pch = 19,cex=0.5,bty="g",ticktype = "detailed", theta = 40, phi = 10,
xlab = "",ylab = "",zlab = "",
colvar = as.numeric(mapvalues(dendrite_type,names(table(dendrite_type)),1:2)),col =alpha(brewer.pal(6,"Spectral")[c(2,5)],0.8),
colkey = F)
ef_all = read.csv("../data/efeature.csv",stringsAsFactors = F)
gf_org = read.csv('../data/expMat.csv',header=T,check.names = F)
match = read.csv('../data/20200711_patchseq_metadata_mouse.csv',header=T,check.names = F,stringsAsFactors = F)
gf_type = read.csv("../data/DER-21_Single_cell_markergenes_UMI.csv",stringsAsFactors = F,header=T)
ef_all$session_id = sapply(ef_all$ID,function(x){na.omit(unlist(strsplit(x, "[^0-9]+")))[3]})
ef_all$subject_id = sapply(ef_all$ID,function(x){na.omit(unlist(strsplit(x, "[^0-9]+")))[2]})
ef_all$session_idg = sapply(ef_all$session_id,FUN = function(x){match$transcriptomics_sample_id[match$ephys_session_id==x]})
setwd("F:/wisc/Jiawei paper/github/visual/code")
ef_all = read.csv("../data/efeature.csv",stringsAsFactors = F)
gf_org = read.csv('../data/expMat.csv',header=T,check.names = F)
match = read.csv('../data/20200711_patchseq_metadata_mouse.csv',header=T,check.names = F,stringsAsFactors = F)
gf_type = read.csv("../data/DER-21_Single_cell_markergenes_UMI.csv",stringsAsFactors = F,header=T)
ef_all$session_id = sapply(ef_all$ID,function(x){na.omit(unlist(strsplit(x, "[^0-9]+")))[3]})
ef_all$subject_id = sapply(ef_all$ID,function(x){na.omit(unlist(strsplit(x, "[^0-9]+")))[2]})
ef_all$session_idg = sapply(ef_all$session_id,FUN = function(x){match$transcriptomics_sample_id[match$ephys_session_id==x]})
match$genotype = sapply(match$t_type,function(x){na.omit(unlist(strsplit(x, " ")))[1]})
match$dendrite_type = mapvalues(match$dendrite_type,from = "sparsely spiny",to = "spiny")
ef_naomit <- ef_all[,c(1:11,
12:18,21:23,#ramp
24:30,33:35,#long
36:42,45:47,#short
51)]
ef_naomit = na.omit(ef_naomit)
match = match[match$transcriptomics_sample_id %in% ef_naomit$session_idg,]
match = match[match$dendrite_type %in% c("spiny","aspiny"),]
match = rbind(match[match$dendrite_type == "spiny",],
match[match$genotype %in% c("Lamp5","Pvalb","Serpinf1","Sncg","Sst","Vip") & match$dendrite_type == "aspiny",])
cellnames = match$transcriptomics_sample_id
ef = ef_naomit[,-which(names(ef_naomit)=="session_idg")];
rownames(ef) = ef_naomit$session_idg;
ef = ef[cellnames,]
gf_org = gf_org[!duplicated(gf_org$gene),]
rownames(gf_org) = gf_org$gene;gf_org = gf_org[,-1]
gf_type$Cluster = sapply(gf_type$Cluster,substr,start=1,stop=2)
genenames = unique(gf_type$Gene[gf_type$Cluster %in% c("Ex","In")])
genenames = na.omit(rownames(gf_org)[match(genenames,toupper(rownames(gf_org)))])
#write.csv(data.frame(gene = genenames),"data3/neruonal_genes.csv",row.names = F)
gf = gf_org[intersect(genenames,rownames(gf_org)),cellnames]
dendrite_type = sapply(cellnames,FUN = function(x){match$dendrite_type[match$transcriptomics_sample_id==x]})
n = nrow(ef)
View(ef)
View(edata)
setwd("F:/wisc/git/mouse_visual_cortex/code")
edata = read.csv("../data/efeature.csv",stringsAsFactors = F)
gdata = read.csv('../data/geneExp.csv',header=T,check.names = F)
meta = read.csv('../data/20200711_patchseq_metadata_mouse.csv',header=T,check.names = F,stringsAsFactors = F)
gdata_type = read.csv("../data/DER-21_Single_cell_markergenes_UMI.csv",stringsAsFactors = F,header=T)
edata$session_id = sapply(edata$ID,function(x){na.omit(unlist(strsplit(x, "[^0-9]+")))[3]})
edata$subject_id = sapply(edata$ID,function(x){na.omit(unlist(strsplit(x, "[^0-9]+")))[2]})
edata$session_idg = sapply(edata$session_id,FUN = function(x){meta$transcriptomics_sample_id[meta$ephys_session_id==x]})
meta$genotype = sapply(meta$t_type,function(x){na.omit(unlist(strsplit(x, " ")))[1]})
meta$dendrite_type = mapvalues(meta$dendrite_type,from = "sparsely spiny",to = "spiny")
edata <- edata[,c(1:11,
12:18,21:23,#ramp
24:30,33:35,#long
36:42,45:47,#short
51)]
edata = na.omit(edata)
meta = meta[meta$transcriptomics_sample_id %in% edata$session_idg,]
meta = meta[meta$dendrite_type %in% c("spiny","aspiny"),]
meta = rbind(meta[meta$dendrite_type == "spiny",],
meta[meta$genotype %in% c("Lamp5","Pvalb","Serpinf1","Sncg","Sst","Vip") & meta$dendrite_type == "aspiny",])
cellnames = meta$transcriptomics_sample_id
edata = edata[,-which(names(edata)=="session_idg")];
rownames(edata) = edata$session_idg;
edata = edata[cellnames,]
gdata = gdata[!duplicated(gdata$gene),]
rownames(gdata) = gdata$gene;gdata = gdata[,-1]
gdata_type$Cluster = sapply(gdata_type$Cluster,substr,start=1,stop=2)
genenames = unique(gdata_type$Gene[gdata_type$Cluster %in% c("Ex","In")])
genenames = na.omit(rownames(gdata)[match(genenames,toupper(rownames(gdata)))])
gdata = gdata[intersect(genenames,rownames(gdata)),cellnames]
dendrite_type = sapply(cellnames,FUN = function(x){meta$dendrite_type[meta$transcriptomics_sample_id==x]})
n = nrow(edata)
method = c('linear manifold','cca','manifold warping','nonlinear manifold aln','nonlinear manifold warp')
#NMA
View(edata)
View(ef)
Dim_red = function(edata,gdata,method,class,cellnames,d,k_NN,k_medoid){
#e-feature
X = apply(edata,2,scale)
#g-feature
Y=t(log10(gdata+1))
#Dim_red
XY_corr=Correspondence(matrix=diag(nrow(X)))
df=ManiNetCluster(X,Y,nameX='Ephys',nameY='Expr',corr=XY_corr,d=d,
method=method,k_NN=k_NN,k_medoids=k_medoid)
df$ttype = rep(class,2)
df$cellnames = rep(unlist(cellnames),2)
return(df[,-1])
}
edata = read.csv("../data/efeature.csv",stringsAsFactors = F)
gdata = read.csv('../data/geneExp.csv',header=T,check.names = F)
meta = read.csv('../data/20200711_patchseq_metadata_mouse.csv',header=T,check.names = F,stringsAsFactors = F)
gdata_type = read.csv("../data/DER-21_Single_cell_markergenes_UMI.csv",stringsAsFactors = F,header=T)
edata$session_id = sapply(edata$ID,function(x){na.omit(unlist(strsplit(x, "[^0-9]+")))[3]})
edata$subject_id = sapply(edata$ID,function(x){na.omit(unlist(strsplit(x, "[^0-9]+")))[2]})
edata$session_idg = sapply(edata$session_id,FUN = function(x){meta$transcriptomics_sample_id[meta$ephys_session_id==x]})
meta$genotype = sapply(meta$t_type,function(x){na.omit(unlist(strsplit(x, " ")))[1]})
meta$dendrite_type = mapvalues(meta$dendrite_type,from = "sparsely spiny",to = "spiny")
edata <- edata[,c(1:11,
12:18,21:23,#ramp
24:30,33:35,#long
36:42,45:47,#short
51)]
edata = na.omit(edata)
View(edata)
meta = meta[meta$transcriptomics_sample_id %in% edata$session_idg,]
meta = meta[meta$dendrite_type %in% c("spiny","aspiny"),]
meta = rbind(meta[meta$dendrite_type == "spiny",],
meta[meta$genotype %in% c("Lamp5","Pvalb","Serpinf1","Sncg","Sst","Vip") & meta$dendrite_type == "aspiny",])
cellnames = meta$transcriptomics_sample_id
rownames(edata) = edata$session_idg
edata = edata[,-which(names(edata)=="session_idg")];
rownames(edata) = edata$session_idg;
edata = edata[cellnames,]
View(edata)
edata = read.csv("../data/efeature.csv",stringsAsFactors = F)
gdata = read.csv('../data/geneExp.csv',header=T,check.names = F)
meta = read.csv('../data/20200711_patchseq_metadata_mouse.csv',header=T,check.names = F,stringsAsFactors = F)
gdata_type = read.csv("../data/DER-21_Single_cell_markergenes_UMI.csv",stringsAsFactors = F,header=T)
edata$session_id = sapply(edata$ID,function(x){na.omit(unlist(strsplit(x, "[^0-9]+")))[3]})
edata$subject_id = sapply(edata$ID,function(x){na.omit(unlist(strsplit(x, "[^0-9]+")))[2]})
edata$session_idg = sapply(edata$session_id,FUN = function(x){meta$transcriptomics_sample_id[meta$ephys_session_id==x]})
meta$genotype = sapply(meta$t_type,function(x){na.omit(unlist(strsplit(x, " ")))[1]})
meta$dendrite_type = mapvalues(meta$dendrite_type,from = "sparsely spiny",to = "spiny")
edata <- edata[,c(1:11,
12:18,21:23,#ramp
24:30,33:35,#long
36:42,45:47,#short
51)]
edata = na.omit(edata)
meta = meta[meta$transcriptomics_sample_id %in% edata$session_idg,]
meta = meta[meta$dendrite_type %in% c("spiny","aspiny"),]
meta = rbind(meta[meta$dendrite_type == "spiny",],
meta[meta$genotype %in% c("Lamp5","Pvalb","Serpinf1","Sncg","Sst","Vip") & meta$dendrite_type == "aspiny",])
View(edata)
cellnames = meta$transcriptomics_sample_id
rownames(edata) = edata$session_idg
View(edata)
edata = edata[,-which(names(edata)=="session_idg")];
View(edata)
edata = edata[cellnames,]
View(edata)
gdata = gdata[!duplicated(gdata$gene),]
rownames(gdata) = gdata$gene;gdata = gdata[,-1]
gdata_type$Cluster = sapply(gdata_type$Cluster,substr,start=1,stop=2)
genenames = unique(gdata_type$Gene[gdata_type$Cluster %in% c("Ex","In")])
genenames = na.omit(rownames(gdata)[match(genenames,toupper(rownames(gdata)))])
gdata = gdata[intersect(genenames,rownames(gdata)),cellnames]
dendrite_type = sapply(cellnames,FUN = function(x){meta$dendrite_type[meta$transcriptomics_sample_id==x]})
n = nrow(edata)
method = c('linear manifold','cca','manifold warping','nonlinear manifold aln','nonlinear manifold warp')
#NMA
NMA_res = Dim_red(edata,gdata,method = method[4],class = dendrite_type, cellnames =cellnames,d=3L,k_NN=2L,k_medoid=5L)
NMA_res_e = NMA_res[NMA_res$data=="Ephys",]
NMA_res_t= NMA_res[NMA_res$data=="Expr",]
#Fig 2C
library(plot3D)
points3D(x=NMA_res_e$Val0, y=NMA_res_e$Val1, z=NMA_res_e$Val2,pch = 19,cex=0.5,bty="g",ticktype = "detailed", theta = 40, phi = 10,
xlab = "",ylab = "",zlab = "",
colvar = as.numeric(mapvalues(dendrite_type,names(table(dendrite_type)),1:2)),col =alpha(brewer.pal(6,"Spectral")[c(2,5)],0.8),
colkey = F)
points3D(x=NMA_res_t$Val0, y=NMA_res_t$Val1, z=NMA_res_t$Val2,pch = 19,cex=0.5,bty="g",ticktype = "detailed", theta = 40, phi = 10,
xlab = "",ylab = "",zlab = "",
colvar = as.numeric(mapvalues(dendrite_type,names(table(dendrite_type)),1:2)),col =alpha(brewer.pal(6,"Spectral")[c(2,5)],0.8),
colkey = F)
library(plyr)
library(reshape2)
library(ManiNetCluster)
library(ggplot2)
library(RColorBrewer)
library(cowplot)
library(stringr)
library(Seurat)
library(dplyr)
library(corrplot)
library(readxl)
library(cluster)
Dim_red = function(edata,gdata,method,class,cellnames,d,k_NN,k_medoid){
#e-feature
X = apply(edata,2,scale)
#g-feature
Y=t(log10(gdata+1))
#Dim_red
XY_corr=Correspondence(matrix=diag(nrow(X)))
df=ManiNetCluster(X,Y,nameX='Ephys',nameY='Expr',corr=XY_corr,d=d,
method=method,k_NN=k_NN,k_medoids=k_medoid)
df$ttype = rep(class,2)
df$cellnames = rep(unlist(cellnames),2)
return(df[,-1])
}
load(file = "../data/visual_data_filtered.rda")
cellnames = rownames(edata)
t_type = sapply(cellnames,FUN = function(x){meta$genotype[meta$transcriptomics_sample_id==x]})
t_type_spec = sapply(cellnames,FUN = function(x){meta$t_type[meta$transcriptomics_sample_id==x]})
n = nrow(edata)
method = c('linear manifold','cca','manifold warping','nonlinear manifold aln','nonlinear manifold warp')
dist =c()
for (i in 1:5){
res = Dim_red(edata,gdata,method = method[i],d=20L,k_NN=2L,k_medoid=5L)
res_e.sd = apply(res[res$data=="Ephys",2:4],2,scale)
res_t.sd = apply(res[res$data=="Expr",2:4],2,scale)
for (k in 1:n){
dist = c(dist,sqrt(sum((res_e.sd[k,]-res_t.sd[k,])^2)))
}
}
load(file = "../data/visual_data_filtered.rda")
cellnames = rownames(edata)
t_type = sapply(cellnames,FUN = function(x){meta$genotype[meta$transcriptomics_sample_id==x]})
t_type_spec = sapply(cellnames,FUN = function(x){meta$t_type[meta$transcriptomics_sample_id==x]})
n = nrow(edata)
method = c('linear manifold','cca','manifold warping','nonlinear manifold aln','nonlinear manifold warp')
dist =c()
for (i in 1:5){
res = Dim_red(edata,gdata,class=t_type,method = method[i],d=20L,k_NN=2L,k_medoid=5L)
res_e.sd = apply(res[res$data=="Ephys",2:4],2,scale)
res_t.sd = apply(res[res$data=="Expr",2:4],2,scale)
for (k in 1:n){
dist = c(dist,sqrt(sum((res_e.sd[k,]-res_t.sd[k,])^2)))
}
}
load(file = "../data/visual_data_filtered.rda")
cellnames = rownames(edata)
t_type = sapply(cellnames,FUN = function(x){meta$genotype[meta$transcriptomics_sample_id==x]})
t_type_spec = sapply(cellnames,FUN = function(x){meta$t_type[meta$transcriptomics_sample_id==x]})
n = nrow(edata)
method = c('linear manifold','cca','manifold warping','nonlinear manifold aln','nonlinear manifold warp')
dist =c()
for (i in 1:5){
res = Dim_red(edata,gdata,class=t_type,cellnames =cellnames,method = method[i],d=20L,k_NN=2L,k_medoid=5L)
res_e.sd = apply(res[res$data=="Ephys",2:4],2,scale)
res_t.sd = apply(res[res$data=="Expr",2:4],2,scale)
for (k in 1:n){
dist = c(dist,sqrt(sum((res_e.sd[k,]-res_t.sd[k,])^2)))
}
}
res = Dim_red(edata,gdata,class=t_type,cellnames =cellnames,method = method[i],d=20L,k_NN=2L,k_medoid=5L)
res_e.sd = apply(res[res$data=="Ephys",2:4],2,scale)
res_t.sd = apply(res[res$data=="Expr",2:4],2,scale)
for (k in 1:n){
dist = c(dist,sqrt(sum((res_e.sd[k,]-res_t.sd[k,])^2)))
}
### PCA ###
#clustering only use gfs
PCA_res_t = prcomp(t(log10(gf+1)),scale=T,rank=3,retx=T)$x
### PCA ###
#clustering only use gfs
PCA_res_t = prcomp(t(log10(gdata+1)),scale=T,rank=3,retx=T)$x
PCA_res_t = data.frame(Val0 = as.numeric(PCA_res_t[,1]),Val1 = as.numeric(PCA_res_t[,2]),Val2 = as.numeric(PCA_res_t[,3]))
PCA_res_t.sd = apply(PCA_res_t[,1:3],2,scale)
#clustering only use efs
PCA_res_e = prcomp(edata,scale=T,rank=3,retx=T)$x
PCA_res_e = data.frame(Val0 = as.numeric(PCA_res_e[,1]),Val1 = as.numeric(PCA_res_e[,2]),Val2 = as.numeric(PCA_res_e[,3]))
PCA_res_e.sd = apply(PCA_res_e[,1:3],2,scale)
for (k in 1:n){
dist = c(dist,sqrt(sum((PCA_res_e.sd[k,1:3]-PCA_res_t.sd[k,1:3])^2)))
}
#boxplot
distmat = data.frame(matrix(as.numeric(dist),nrow = nrow(edata)))
colnames(distmat) = c('LM','CCA','MW','NMA','NMW',"PCA")
distmat = distmat[,c(-5)]
distmat = melt(distmat,variable.name = "Method", value.name = "Pairwise distance between g & e features")
boxplot(`Pairwise distance between g & e features`~Method,data=distmat,
ylab="Pairwise distance between G & E features", xlab="",outline =F,col ="white")
tapply(distmat$`Pairwise distance between g & e features`,INDEX = distmat$Method,FUN = mean)
load(file = "../data/visual_data_filtered.rda")
gdata = read.csv("../data/expMat.csv",header = T)
load(file = "../data/visual_data_filtered.rda")
gdata = read.csv("../data/geneExp.csv",header = T)
diff_edata = read.csv("../data/diff_edata.csv",header = T,stringsAsFactors = F)
diff_genes = read.csv("../data/diff_genes.csv",header = T,stringsAsFactors = F)
clustering = read.csv("../data/efeatures_NMA.csv",header = T,stringsAsFactors = F)
load(file = "../data/visual_data_filtered.rda")
gdata = read.csv("../data/geneExp.csv",header = T,check.names = FALSE)
diff_edata = read.csv("../data/diff_edata.csv",header = T,stringsAsFactors = F)
diff_genes = read.csv("../data/diff_genes.csv",header = T,stringsAsFactors = F)
clustering = read.csv("../data/efeature_NMA.csv",header = T,stringsAsFactors = F)
cellnames = rownames(edata)
gdata = gdata[!duplicated(gdata$gene),cellnames]
gdata[,1]
rownames(gdata)
gdata$gene
load(file = "../data/visual_data_filtered.rda")
gdata = read.csv("../data/geneExp.csv",header = T,check.names = FALSE)
diff_edata = read.csv("../data/diff_edata.csv",header = T,stringsAsFactors = F)
diff_genes = read.csv("../data/diff_genes.csv",header = T,stringsAsFactors = F)
clustering = read.csv("../data/efeature_NMA.csv",header = T,stringsAsFactors = F)
cellnames = c("gene",rownames(edata))
gdata = gdata[!duplicated(gdata$gene),cellnames]
rownames(gdata) = gdata[,1];gdata = gdata[,-1]
cellnames = rownames(edata)
meta$genotype = sapply(meta$t_type,function(x){na.omit(unlist(strsplit(x, " ")))[1]})
t_type = sapply(cellnames,FUN = function(x){meta$genotype[meta$transcriptomics_sample_id==x]})
n = nrow(edata)
cl1_genes = diff_genes$gene[diff_genes$cluster == "Cluster 1"]
net_gdata = gdata[c("Irf5","Spi1","Atf3"),]
head(net_gdata)
net_gdata = data.frame(t(log10(net_gdata+1)))
#cor(net_gdata[net_gdata$Irf5>0 & net_gdata$Spi1>0 & net_gdata$Atf3>0,])
cor(net_gdata)
#Figure S7
library(ggplot2)
library(gridExtra)
library(ggpubr)
p1 = ggplot(net_gdata[diff_genes$cluster == "Cluster 1",],aes(x=Irf5,y=Atf3)) + geom_point(col = "#0C2D48",alpha = 0.6,size = 2) + theme_minimal() + stat_cor(method="pearson") + ggtitle("cluster1 visual")
p2 = ggplot(net_gdata[diff_genes$cluster == "Cluster 1",],aes(x=Spi1,y=Atf3)) + geom_point(col = "#0C2D48",alpha = 0.6,size = 2) + theme_minimal() + stat_cor(method="pearson")+ ggtitle("cluster1 visual")
p3 = ggplot(net_gdata,aes(x=Irf5,y=Atf3)) + geom_point(col = "#0C2D48",alpha = 0.6,size = 2) + theme_minimal() + stat_cor(method="pearson")+ ggtitle("all cells visual")
p4 = ggplot(net_gdata,aes(x=Spi1,y=Atf3)) + geom_point(col = "#0C2D48",alpha = 0.6,size = 2) + theme_minimal() + stat_cor(method="pearson")+ ggtitle("all cells visual")
p = grid.arrange(p1, p2,p3,p4, nrow = 2,ncol = 2)
ggsave(file=paste0("../figure/network_Atf3.pdf"), p,width = 20,height = 20, units = "cm")
load(file = "../data/visual_data_filtered.rda")
diff_edata = read.csv("../data/diff_edata.csv",header = T,stringsAsFactors = F)
diff_genes = read.csv("../data/diff_genes.csv",header = T,stringsAsFactors = F)
clustering = read.csv("../data/efeatures_NMA.csv",header = T,stringsAsFactors = F)
load(file = "../data/visual_data_filtered.rda")
diff_edata = read.csv("../data/diff_edata.csv",header = T,stringsAsFactors = F)
diff_genes = read.csv("../data/diff_genes.csv",header = T,stringsAsFactors = F)
clustering = read.csv("../data/efeature_NMA.csv",header = T,stringsAsFactors = F)
cellnames = rownames(edata)
t_type = sapply(cellnames,FUN = function(x){meta$genotype[meta$transcriptomics_sample_id==x]})
n = nrow(edata)
library(ggplot2)
Pred_R2 = c()
train_R2 = c()
set.seed(1)
train_ind = sample(1:n,n*0.9,replace = FALSE)
for (j in 1:5){
pred_genes = data.frame(log10(t(gdata[diff_genes$gene[diff_genes$cluster == paste0("Cluster ",j) & diff_genes$p_val_adj <0.05],])+1))
pred_edata = edata[,diff_edata$diff_e_feature[diff_edata$cluster == j]]
for (i in 1:ncol(pred_edata)){
feature = colnames(pred_edata)[i]
pred = cbind(pred_genes,pred_edata[,i])
colnames(pred)[length(colnames(pred))] = "y"
train_pred = pred[train_ind,]
test_pred = pred[-train_ind,]
fiti = lm(y~.,data = pred)
Pred_R2i = 1- sum((predict.lm(fiti,test_pred)-test_pred$y)^2)/sum((test_pred$y - mean(test_pred$y))^2)
Pred_R2 = c(Pred_R2,Pred_R2i)
train_R2 = c(train_R2,(summary(fiti)$r.squared))
#plot
pred_df <- data.frame(x = predict.lm(fiti,test_pred),y = test_pred$y)
lim_range = -min(pred_df)+max(pred_df)
scatter = ggplot(pred_df, aes(x, y))+geom_point(col = "#0C2D48",alpha = 0.6,size = 2)+xlim(min(pred_df),max(pred_df)) +
ylim(min(pred_df),max(pred_df)) + theme_minimal() +
labs(y="observed",x="predicted")
ggsave(file=paste0("../figure/pred/",feature,".png"), scatter,width = 10,height = 10, units = "cm")
}
}
library(ggplot2)
Pred_R2 = c()
train_R2 = c()
set.seed(1)
train_ind = sample(1:n,n*0.9,replace = FALSE)
for (j in 1:5){
pred_genes = data.frame(log10(t(gdata[diff_genes$gene[diff_genes$cluster == paste0("Cluster ",j) & diff_genes$p_val_adj <0.05],])+1))
pred_edata = edata[,diff_edata$diff_e_feature[diff_edata$cluster == j]]
for (i in 1:ncol(pred_edata)){
feature = colnames(pred_edata)[i]
pred = cbind(pred_genes,pred_edata[,i])
colnames(pred)[length(colnames(pred))] = "y"
train_pred = pred[train_ind,]
test_pred = pred[-train_ind,]
fiti = lm(y~.,data = pred)
Pred_R2i = 1- sum((predict.lm(fiti,test_pred)-test_pred$y)^2)/sum((test_pred$y - mean(test_pred$y))^2)
Pred_R2 = c(Pred_R2,Pred_R2i)
train_R2 = c(train_R2,(summary(fiti)$r.squared))
#plot
pred_df <- data.frame(x = predict.lm(fiti,test_pred),y = test_pred$y)
lim_range = -min(pred_df)+max(pred_df)
scatter = ggplot(pred_df, aes(x, y))+geom_point(col = "#0C2D48",alpha = 0.6,size = 2)+xlim(min(pred_df),max(pred_df)) +
ylim(min(pred_df),max(pred_df)) + theme_minimal() +
labs(y="observed",x="predicted")
#ggsave(file=paste0("../figure/pred/",feature,".png"), scatter,width = 10,height = 10, units = "cm")
}
}
pred_res = data.frame(
e_feature = diff_edata$diff_e_feature,
cluster = diff_edata$cluster,
p_val_adj = diff_edata$p_val_adj,
Pred_R2 = Pred_R2,
train_R2 = train_R2
)
write.csv(pred_res,"../data/pred_res.csv",row.names=F)
pred_res$e_feature = sapply(pred_res$e_feature, gsub, pattern = "_", replacement = " ", fixed = TRUE)
library(RColorBrewer)
p<-ggplot(data=pred_res[!duplicated(pred_res$e_feature) & pred_res$Pred_R2>0.5,],
aes(x = reorder(e_feature,Pred_R2), y=Pred_R2)) + labs(y="enrichment")+
geom_bar(stat="identity",width=0.4,fill = brewer.pal(6,"Spectral")[5],alpha = 0.8)+ theme_minimal() +
labs(y="test R square (>0.5)",x="") +
coord_flip() +
theme(axis.text = element_text(size=12.5,lineheight=.8),
axis.title = element_text(size=11,face = "bold"))
p
#ggsave(file=paste0("../figure/pred_R.png"), p)
library(viridis)
library(plyr)
pal = brewer.pal(6,"Dark2")[1:5]
n = nrow(pred_edata)
pred_genes = data.frame(log10(t(gdata[diff_genes$gene[diff_genes$cluster == paste0("Cluster ",1)],])+1))
pred = cbind(pred_genes,pred_edata[,1])
colnames(pred)[length(colnames(pred))] = "y"
train_pred = pred[train_ind,]
test_pred = pred[-train_ind,]
fit = lm(y~.,data = train_pred)
plot(fit$fitted.values,train_pred$y)
plot(predict.lm(fit,test_pred),test_pred$y,
col = mapvalues(clustering$gmm_cluster,1:5,pal),
ylab = "predicted U/D ratio (long square)",xlab = "Measured U/D ratio (long square)",pch = 19)
legend("topleft", pch = 19, title="GMM Clusters",
paste0("Cluster ", 1:5), col=pal, cex=0.8)
library(ggplot2)
library(gridExtra)
pred_df <- data.frame(x = predict.lm(fit,test_pred),y = test_pred$y)
lim_range = -min(pred_df)+max(pred_df)
hist_top <- ggplot() + geom_histogram(aes(pred_df$x),bins = 10, col = "gray") + theme_minimal()+labs(y="",x="")
empty <- ggplot()+geom_point(aes(1,1), colour="white")+
theme(axis.ticks=element_blank(),
panel.background=element_blank(),
axis.text.x=element_blank(), axis.text.y=element_blank(),
axis.title.x=element_blank(), axis.title.y=element_blank())
scatter <- ggplot(pred_df, aes(x, y))+geom_point()+xlim(min(pred_df),max(pred_df)) +
ylim(min(pred_df),max(pred_df)) + theme_minimal() +
labs(y="observed",x="predicted")
hist_right <- ggplot()+geom_histogram(aes(pred_df$y),bins = 10, col = "gray", fill = "#6D1A36")+coord_flip()+ theme_minimal()+labs(y="",x="")
grid.arrange(hist_top, empty, scatter, hist_right, ncol=2, nrow=2, widths=c(4, 1), heights=c(1, 4))
load(file = "../data/visual_data_filtered.rda")
diff_edata = read.csv("../data/diff_edata.csv",header = T,stringsAsFactors = F)
diff_genes = read.csv("../data/diff_genes.csv",header = T,stringsAsFactors = F)
clustering = read.csv("../data/efeature_NMA.csv",header = T,stringsAsFactors = F)
cellnames = rownames(edata)
t_type = sapply(cellnames,FUN = function(x){meta$genotype[meta$transcriptomics_sample_id==x]})
n = nrow(edata)
